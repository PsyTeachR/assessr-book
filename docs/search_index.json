[
["index.html", "Marking R assignments with assessr Chapter 1 About assessr and this book", " Marking R assignments with assessr Dale J. Barr 2019-10-26 Chapter 1 About assessr and this book this site is under construction "],
["getting-started.html", "Chapter 2 Getting Started 2.1 Prerequisites 2.2 Installation 2.3 Getting help", " Chapter 2 Getting Started 2.1 Prerequisites 2.2 Installation 2.3 Getting help "],
["introduction.html", "Chapter 3 Introduction 3.1 Installation 3.2 Background 3.3 Tutorial example", " Chapter 3 Introduction This chapter gives an example of the basic use of the assessr package by way of a tutorial example. 3.1 Installation 3.2 Background 3.2.1 Components of an assignment task master files stub file assessment code submission files feedback template feedback files 3.2.2 Assessment and feedback workflow 3.3 Tutorial example 3.3.1 Creating the master file for a task 3.3.2 Rendering a stub file 3.3.3 Writing assessment code 3.3.4 Testing your assessment code 3.3.5 Automated assessment and feedback 3.3.6 Checking and overriding assessment results 3.3.7 Rendering feedback files "],
["tips-on-security.html", "Chapter 4 Tips on Security 4.1 Controlling who can submit 4.2 Run code inside a virtual environment or container", " Chapter 4 Tips on Security Blindly running other peopleâ€™s code is a dangerous proposition. Although students are unlikely to deliberately include malicious code such as system(&quot;rm -rf /&quot;), a hacker who discovers an unsecured upload site for RMarkdown files could easily do this. A student is more likely to include code such as install.packages(&quot;tidyverse&quot;) which will not only take a long time to run, but can seriously damage your R installation. While it is not possible to have a setup that is 100% free from vulnerabilities, here are two tips that can minimize the chances of running problematic code. 4.1 Controlling who can submit 4.1.1 Use a Digital Learning Environment (DLE) 4.2 Run code inside a virtual environment or container "]
]
